//
//  AIBHTMLWebView.m
//  AIBHTMLWebView
//
//  Created by Thomas Parslow on 05/04/2015.
//  Copyright (c) 2015 Thomas Parslow. MIT License.
//

#import "AIBHTMLWebView.h"

#import <UIKit/UIKit.h>
#import "RCTEventDispatcher.h"
#import "UIView+React.h"
#import "RCTView.h"

@interface AIBHTMLWebView () <UIWebViewDelegate>

@end

@implementation AIBHTMLWebView
{
    RCTEventDispatcher *_eventDispatcher;
    UIWebView *_webView;
}

- (void)setHTML:(NSString *)HTML
{
    // TODO: Do we need to ensure that duplicate sets are ignored?
    NSString *path =[[[NSBundle mainBundle] bundlePath] stringByAppendingString:@"/assets"];
    // NSLog(@"assets path");
    // NSLog(path);
    // 本地css, js文件是从assets中获取
    // /Users/life/Library/Developer/CoreSimulator/Devices/F101CDF9-DBB9-4E85-B87B-93538517AA56/data/Containers/Bundle/Application/A40B6E21-3346-48AD-A92A-B71495CEF5C4/leanote.app/assets
    [_webView loadHTMLString:HTML baseURL: [NSURL fileURLWithPath: path]];
    [self reportHeight];
}

- (void)setEnableScroll:(BOOL) enable
{
    _webView.scrollView.scrollEnabled = enable;
}

- (instancetype)initWithEventDispatcher:(RCTEventDispatcher *)eventDispatcher
{
    if ((self = [super initWithFrame:CGRectZero])) {
        _eventDispatcher = eventDispatcher;
        _webView = [[UIWebView alloc] initWithFrame:self.bounds];
        _webView.delegate = self;
        [self addSubview:_webView];
    }
    return self;
}

- (void)layoutSubviews
{
    [super layoutSubviews];
    _webView.frame = self.bounds;
//    [self reportHeight];
}

- (void)reportHeight
{
    NSNumber *height =[NSNumber numberWithFloat: _webView.scrollView.contentSize.height];
    NSMutableDictionary *event = [[NSMutableDictionary alloc] initWithDictionary: @{
                                                                                    @"target": self.reactTag,
                                                                                    @"contentHeight": height
                                                                                    }];
    [_eventDispatcher sendInputEventWithName:@"contentHeight" body:event];
}

#pragma mark - UIWebViewDelegate methods

- (BOOL)webView:(UIWebView *)webView 
    shouldStartLoadWithRequest:(NSURLRequest *)request 
    navigationType:(UIWebViewNavigationType)navigationType {

    NSLog(@"local css/js");
    NSLog([request.URL absoluteString]);
    
    if ([[request.URL scheme] isEqual:@"file"] && navigationType == UIWebViewNavigationTypeOther) {
        // When we load from HTML string it still shows up as a request, so let's let that through
        return YES;
    } else {
        NSMutableDictionary *event = [[NSMutableDictionary alloc] initWithDictionary: @{
                                                                                        @"target": self.reactTag,
                                                                                        @"url": [request.URL absoluteString]
                                                                                        }];
        [_eventDispatcher sendInputEventWithName:@"link" body:event];
        return NO; // Tells the webView not to load the URL
    }
}

- (void)webViewDidFinishLoad:(UIWebView *)webView {
    [self reportHeight];
}

@end
